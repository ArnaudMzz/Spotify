{"ast":null,"code":"var _jsxFileName = \"/home/arnaudmz/Epitech/Spotify/W-WEB-090-MLN-1-1-spotify-arnaud.mazoire/spotify/src/components/PlayerContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useRef, useContext } from \"react\";\n\n// Définir les types du contexte\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext(null);\nexport const usePlayer = () => {\n  _s();\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error(\"usePlayer must be used within a PlayerProvider\");\n  }\n  return context;\n};\n_s(usePlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PlayerProvider = ({\n  children\n}) => {\n  _s2();\n  const audioRef = useRef(null);\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const togglePlay = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(prev => !prev);\n    }\n  };\n  const playTrack = trackUrl => {\n    setCurrentTrack(trackUrl);\n    if (audioRef.current) {\n      audioRef.current.src = trackUrl;\n      audioRef.current.play();\n      setIsPlaying(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      currentTrack,\n      isPlaying,\n      togglePlay,\n      playTrack\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s2(PlayerProvider, \"8Skk9ouxHNK+bRTNqCIKKig2mDI=\");\n_c = PlayerProvider;\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useContext","jsxDEV","_jsxDEV","PlayerContext","usePlayer","_s","context","Error","PlayerProvider","children","_s2","audioRef","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","togglePlay","current","pause","play","prev","playTrack","trackUrl","src","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/arnaudmz/Epitech/Spotify/W-WEB-090-MLN-1-1-spotify-arnaud.mazoire/spotify/src/components/PlayerContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useState,\n  useRef,\n  useContext,\n  ReactNode,\n} from \"react\";\n\n// Définir les types du contexte\ninterface PlayerContextType {\n  currentTrack: string | null;\n  isPlaying: boolean;\n  togglePlay: () => void;\n  playTrack: (trackUrl: string) => void;\n  audioRef: React.RefObject<HTMLAudioElement>;\n}\n\nconst PlayerContext = createContext<PlayerContextType | null>(null);\n\nexport const usePlayer = () => {\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error(\"usePlayer must be used within a PlayerProvider\");\n  }\n  return context;\n};\n\ninterface PlayerProviderProps {\n  children: ReactNode;\n}\n\nexport const PlayerProvider = ({ children }: PlayerProviderProps) => {\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const [currentTrack, setCurrentTrack] = useState<string | null>(null);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n\n  const togglePlay = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying((prev) => !prev);\n    }\n  };\n\n  const playTrack = (trackUrl: string) => {\n    setCurrentTrack(trackUrl);\n    if (audioRef.current) {\n      audioRef.current.src = trackUrl;\n      audioRef.current.play();\n      setIsPlaying(true);\n    }\n  };\n\n  return (\n    <PlayerContext.Provider\n      value={{ currentTrack, isPlaying, togglePlay, playTrack }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IACVC,aAAa,EACbC,QAAQ,EACRC,MAAM,EACNC,UAAU,QAEL,OAAO;;AAEd;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,aAAa,gBAAGN,aAAa,CAA2B,IAAI,CAAC;AAEnE,OAAO,MAAMO,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,OAAO,GAAGN,UAAU,CAACG,aAAa,CAAC;EACzC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,SAAS;AAYtB,OAAO,MAAMI,cAAc,GAAGA,CAAC;EAAEC;AAA8B,CAAC,KAAK;EAAAC,GAAA;EACnE,MAAMC,QAAQ,GAAGZ,MAAM,CAAmB,IAAI,CAAC;EAC/C,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EACrE,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAU,KAAK,CAAC;EAE1D,MAAMkB,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIL,QAAQ,CAACM,OAAO,EAAE;MACpB,IAAIH,SAAS,EAAE;QACbH,QAAQ,CAACM,OAAO,CAACC,KAAK,CAAC,CAAC;MAC1B,CAAC,MAAM;QACLP,QAAQ,CAACM,OAAO,CAACE,IAAI,CAAC,CAAC;MACzB;MACAJ,YAAY,CAAEK,IAAI,IAAK,CAACA,IAAI,CAAC;IAC/B;EACF,CAAC;EAED,MAAMC,SAAS,GAAIC,QAAgB,IAAK;IACtCT,eAAe,CAACS,QAAQ,CAAC;IACzB,IAAIX,QAAQ,CAACM,OAAO,EAAE;MACpBN,QAAQ,CAACM,OAAO,CAACM,GAAG,GAAGD,QAAQ;MAC/BX,QAAQ,CAACM,OAAO,CAACE,IAAI,CAAC,CAAC;MACvBJ,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;EAED,oBACEb,OAAA,CAACC,aAAa,CAACqB,QAAQ;IACrBC,KAAK,EAAE;MAAEb,YAAY;MAAEE,SAAS;MAAEE,UAAU;MAAEK;IAAU,CAAE;IAAAZ,QAAA,EAEzDA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACnB,GAAA,CAhCWF,cAAc;AAAAsB,EAAA,GAAdtB,cAAc;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}